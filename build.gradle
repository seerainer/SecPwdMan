plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.1'
}

group = 'io.github.secpwdman'
version = '0.8.4'

repositories {
    mavenCentral()
}

def swtArtifact = 'org.eclipse.swt.'
def swtVersion = '3.125.0'

def os = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)
if (os.contains("windows")) { swtArtifact += 'win32.win32.' }
else if (os.contains("mac")) { swtArtifact += 'cocoa.macosx.' }
else if (os.contains("linux")) { swtArtifact += 'gtk.linux.' }

def arch = System.getProperty("os.arch")
if (arch == "amd64" || arch == "x86_64") { swtArtifact += 'x86_64' }
else if (arch == "aarch64") { swtArtifact += 'aarch64' }

dependencies {
    implementation('commons-validator:commons-validator:1.8.0') {
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
        exclude group: 'commons-collections', module: 'commons-collections'
        exclude group: 'commons-digester', module: 'commons-digester'
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation 'com.nulab-inc:zxcvbn:1.8.2'
    implementation 'com.password4j:password4j:1.8.1'
    implementation 'net.sourceforge.javacsv:javacsv:2.0'
    implementation("org.eclipse.platform:${swtArtifact}:${swtVersion}") {
        exclude group: 'org.eclipse.platform', module: 'org.eclipse.swt'
    }
    implementation 'org.slf4j:slf4j-nop:2.0.12'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}

application {
    mainClass = 'io.github.secpwdman.SecPwdMan'
}

graalvmNative {
    testSupport = false
    toolchainDetection = true
    
    binaries {
        main {
            imageName = 'SecPwdMan'
            mainClass = application.mainClass
            buildArgs.add('-Ob')
            buildArgs.add('-march=x86-64-v3')
            buildArgs.add('--no-fallback')
            // buildArgs.add('--pgo-instrument')
            // buildArgs.add('--pgo=default.iprof')
            // buildArgs.add('-H:+UnlockExperimentalVMOptions')
            // buildArgs.add('-H:+BuildReport')
            buildArgs.add('-R:MinHeapSize=32m')
            buildArgs.add('-R:MaxHeapSize=4g')
            buildArgs.add('-R:MaxNewSize=32m')
            useFatJar = true
        }
    }
}

tasks.withType(Jar).configureEach {
    exclude 'META-INF/ECLIPSE_.RSA'
    exclude 'META-INF/ECLIPSE_.SF'
    manifest {
	    attributes 'Main-Class': application.mainClass
    }
}
